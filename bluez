self.active_call_path = None
self.voice_call_manager = None


def setup_hfp_manager(self, device_address):
    """Initialize oFono VoiceCallManager and connect to call signals."""
    path = self.get_ofono_path_for_device(device_address)
    if not path:
        self.log.warning(f"No ofono path for {device_address}")
        return

    try:
        self.voice_call_manager = dbus.Interface(
            self.bus.get_object("org.ofono", path), "org.ofono.VoiceCallManager"
        )

        # Connect to call events
        self.voice_call_manager.connect_to_signal("CallAdded", self.on_call_added)
        self.voice_call_manager.connect_to_signal("CallRemoved", self.on_call_removed)

        self.log.info(f"VoiceCallManager initialized for {device_address}")
    except Exception as e:
        self.log.error(f"Failed to setup VoiceCallManager for {device_address}: {e}")

self.bluetooth_device_manager.setup_hfp_manager(device_address)

def on_call_added(self, call_path, properties):
    """Triggered when a new call starts or incoming call detected."""
    self.active_call_path = call_path
    number = properties.get("LineIdentification", "Unknown")
    state = properties.get("State", "unknown")
    self.log.info(f"New call: {call_path}, Number={number}, State={state}")

    # Optional: Notify the UI
    if hasattr(self, "ui_callback"):
        self.ui_callback("call_status", state, number)

def on_call_removed(self, call_path):
    """Triggered when a call ends."""
    if self.active_call_path == call_path:
        self.log.info(f"Call ended: {call_path}")
        self.active_call_path = None

        if hasattr(self, "ui_callback"):
            self.ui_callback("call_status", "disconnected", "")


def dial_number(self, device_address, number):
    """Dial a phone number via HFP."""
    path = self.get_ofono_path_for_device(device_address)
    if not path:
        self.log.warning(f"No ofono path for {device_address}")
        return False
    try:
        manager = dbus.Interface(self.bus.get_object("org.ofono", path), "org.ofono.VoiceCallManager")
        manager.Dial(number, {})
        return True
    except Exception as e:
        self.log.error(f"Failed to dial {number} on {device_address}: {e}")
        return False


def answer_call(self, device_address):
    """Answer incoming call."""
    if not self.active_call_path:
        self.log.warning("No active call to answer.")
        return
    try:
        call_iface = dbus.Interface(self.bus.get_object("org.ofono", self.active_call_path), "org.ofono.VoiceCall")
        call_iface.Answer()
        self.log.info("Answered call.")
    except Exception as e:
        self.log.error(f"Failed to answer call: {e}")


def hangup_active_call(self):
    """Hang up the current active call."""
    if not self.active_call_path:
        self.log.warning("No active call to hang up.")
        return
    try:
        call_iface = dbus.Interface(self.bus.get_object("org.ofono", self.active_call_path), "org.ofono.VoiceCall")
        call_iface.Hangup()
        self.log.info(f"Hung up call: {self.active_call_path}")
    except Exception as e:
        self.log.error(f"Failed to hang up: {e}")
self.dial_button.clicked.connect(lambda: self.bluetooth_device_manager.dial_number(device_address, self.phone_number_input.text()))
self.answer_call_button.clicked.connect(lambda: self.bluetooth_device_manager.answer_call(device_address))
self.hangup_call_button.clicked.connect(lambda: self.bluetooth_device_manager.hangup_active_call())

def ui_callback(self, event, *args):
    if event == "call_status":
        state, number = args
        self.call_status_label.setText(f"Status: {state}")
        self.call_number_label.setText(f"Number: {number}")










def create_hfp_profile_ui(self, device_address):
    """Builds and returns the HFP (Hands-Free Profile) panel for call control and audio gateway testing."""
    bold_font = QFont("Segoe UI", 10, QFont.Weight.Bold)
    layout = QVBoxLayout()
    layout.setContentsMargins(15, 15, 15, 15)
    layout.setSpacing(15)

    hfp_label = QLabel("<b>HFP Functionality</b>")
    hfp_label.setFont(QFont("Segoe UI", 12, QFont.Weight.Bold))
    hfp_label.setAlignment(Qt.AlignmentFlag.AlignLeft)
    layout.addWidget(hfp_label)

    # --- Call status section ---
    status_group = QGroupBox("Call Status")
    status_layout = QVBoxLayout()

    self.call_number_label = QLabel("Number: -")
    self.call_status_label = QLabel("Status: Idle")

    self.call_number_label.setFont(bold_font)
    self.call_status_label.setFont(bold_font)

    status_layout.addWidget(self.call_number_label)
    status_layout.addWidget(self.call_status_label)
    status_group.setLayout(status_layout)
    layout.addWidget(status_group)

    # --- Call control section ---
    call_control_group = QGroupBox("Call Control")
    call_control_group.setStyleSheet(styles.bluetooth_profiles_groupbox_style)
    call_control_layout = QVBoxLayout()

    self.answer_call_button = QPushButton("Answer Call")
    self.hangup_call_button = QPushButton("Hang Up")
    self.dial_button = QPushButton("Dial Number")
    self.phone_number_input = QLineEdit()
    self.phone_number_input.setPlaceholderText("Enter phone number")

    for button in [self.answer_call_button, self.hangup_call_button, self.dial_button]:
        button.setStyleSheet(styles.bluetooth_profiles_button_style)
        button.setFont(bold_font)

    self.dial_button.clicked.connect(lambda: self.bluetooth_device_manager.dial_number(device_address, self.phone_number_input.text()))
    self.answer_call_button.clicked.connect(lambda: self.bluetooth_device_manager.answer_call(device_address))
    self.hangup_call_button.clicked.connect(lambda: self.bluetooth_device_manager.hangup_active_call())

    call_control_layout.addWidget(self.phone_number_input)
    call_control_layout.addWidget(self.dial_button)
    call_control_layout.addWidget(self.answer_call_button)
    call_control_layout.addWidget(self.hangup_call_button)
    call_control_group.setLayout(call_control_layout)
    layout.addWidget(call_control_group)

    widget = QWidget()
    widget.setLayout(layout)
    widget.setStyleSheet(styles.device_tab_widget_style_sheet)
    return widget

def on_call_added(self, call_path, properties):
    """Triggered when a new call starts or incoming call detected."""
    self.active_call_path = call_path
    number = properties.get("LineIdentification", "Unknown")
    state = properties.get("State", "unknown")
    self.log.info(f"New call: {call_path}, Number={number}, State={state}")

    if hasattr(self, "ui_callback"):
        self.ui_callback("update_call_status", state, number)


def on_call_removed(self, call_path):
    """Triggered when a call ends."""
    if self.active_call_path == call_path:
        self.log.info(f"Call ended: {call_path}")
        self.active_call_path = None

        if hasattr(self, "ui_callback"):
            self.ui_callback("update_call_status", "disconnected", "")


self.bluetooth_device_manager = BluetoothDeviceManager(ui_callback=self.handle_hfp_ui_update)


def handle_hfp_ui_update(self, event, *args):
    """Callback from BluetoothDeviceManager to update the UI based on call events."""
    if event == "update_call_status":
        state, number = args

        # Update the labels in real-time
        if hasattr(self, "call_status_label"):
            self.call_status_label.setText(f"Status: {state.capitalize()}")
        if hasattr(self, "call_number_label"):
            self.call_number_label.setText(f"Number: {number if number else '-'}")


